//
//  UserInfoInteractor.swift
//  ApplicationChallenge
//
//  Created by Sakdinan Sukkhasem on 22/1/22.
//  Copyright (c) 2022 Sakdinan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

enum UserInfoAction {
}

protocol UserInfoBusinessLogic: SceneBusinessLogic {
    func userActionOccured(userAction: LoginUserAction)
}

protocol UserInfoDataStore {
}

class UserInfoInteractor: UserInfoDataStore {
    var presenter: UserInfoPresentationLogic?
    lazy var worker = UserInfoWorker()
}

extension UserInfoInteractor: UserInfoBusinessLogic {
    func userActionOccured(userAction: LoginUserAction) {
        
    }
    
    func viewControllerStateChanged(state: ViewControllerState) {
        switch state {
        case .viewDidLoad:
            getUsers()
        default: break
        }
    }
}

private extension UserInfoInteractor {
    func getUsers() {
        presenter?.presentLoading(response: UserInfo.Loading.Response(isShow: true))
        worker.getUsers {[weak self] result in
            guard let self = self, let presenter = self.presenter else { return }
            presenter.presentLoading(response: UserInfo.Loading.Response(isShow: false))
            switch result {
            case .success(let users):
                let response = UserInfo.UserInfo.Response(users: users)
                presenter.presentUserInfo(response: response)
            case .error(let message):
                break
            }
        }
    }
}
